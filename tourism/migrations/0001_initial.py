# Generated by Django 5.2.6 on 2025-09-18 17:10

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("eco", "Eco Tourism"),
                            ("cultural", "Cultural Tourism"),
                            ("religious", "Religious Tourism"),
                            ("adventure", "Adventure Tourism"),
                            ("historical", "Historical Tourism"),
                            ("wildlife", "Wildlife Tourism"),
                            ("beach", "Beach Tourism"),
                            ("mountain", "Mountain Tourism"),
                        ],
                        max_length=50,
                        unique=True,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                (
                    "icon",
                    models.CharField(default="fas fa-map-marker-alt", max_length=50),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name_plural": "Categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="State",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("code", models.CharField(max_length=3, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Destination",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("slug", models.SlugField(max_length=200, unique=True)),
                ("description", models.TextField()),
                (
                    "short_description",
                    models.CharField(
                        help_text="Brief description for cards", max_length=300
                    ),
                ),
                ("city", models.CharField(max_length=100)),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "main_image",
                    models.ImageField(
                        help_text="Main destination image", upload_to="destinations/"
                    ),
                ),
                (
                    "gallery_images",
                    models.JSONField(
                        blank=True, default=list, help_text="Additional image URLs"
                    ),
                ),
                ("best_time_to_visit", models.CharField(blank=True, max_length=200)),
                ("how_to_reach", models.TextField(blank=True)),
                ("entry_fee", models.CharField(blank=True, max_length=100)),
                ("opening_hours", models.CharField(blank=True, max_length=100)),
                ("historical_significance", models.TextField(blank=True)),
                ("cultural_importance", models.TextField(blank=True)),
                ("local_cuisine", models.TextField(blank=True)),
                (
                    "average_rating",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                ("total_reviews", models.IntegerField(default=0)),
                (
                    "featured",
                    models.BooleanField(
                        default=False, help_text="Featured destination"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "categories",
                    models.ManyToManyField(
                        related_name="destinations", to="tourism.category"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "state",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="tourism.state"
                    ),
                ),
            ],
            options={
                "ordering": ["-featured", "-average_rating", "name"],
            },
        ),
        migrations.CreateModel(
            name="Wishlist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "destination",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tourism.destination",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.IntegerField(
                        help_text="Rating from 1 to 5 stars",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("comment", models.TextField()),
                ("visit_date", models.DateField(blank=True, null=True)),
                ("helpful_count", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "destination",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="tourism.destination",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "unique_together": {("destination", "user")},
            },
        ),
        migrations.AddIndex(
            model_name="destination",
            index=models.Index(
                fields=["state", "city"], name="tourism_des_state_i_99eaf6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="destination",
            index=models.Index(
                fields=["featured", "is_active"], name="tourism_des_feature_a739fb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="destination",
            index=models.Index(
                fields=["average_rating"], name="tourism_des_average_95422b_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="wishlist",
            unique_together={("user", "destination")},
        ),
    ]
